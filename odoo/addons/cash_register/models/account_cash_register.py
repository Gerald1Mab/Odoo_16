from odoo import fields, models, api, _
from odoo.exceptions import UserError
import logging
import string
import random
import datetime
from datetime import datetime, timedelta

_logger = logging.getLogger(__name__)


class AccountCashRegister(models.Model):
    _name = 'account.cash.register'
    _description = 'Description'
    _inherit = ['mail.thread', 'mail.activity.mixin']
    _order = "payment_date asc"

    _sql_constraints = [
        ('name_uniq', 'unique(name)',
         'Le numéro de pièce est unique'),
    ]

    @api.model
    def _default_employee_id(self):
        return self.env['hr.employee'].search([('user_id', '=', self.env.uid)], limit=1)

    company_id = fields.Many2one('res.company', string='Company', readonly=True, copy=False,
                                 default=lambda self: self.env['res.company']._company_default_get())

    @api.model
    def _default_date_time(self):
        return datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    @api.model
    def _default_cash_year(self):
        return datetime.now().strftime("%B %Y")

    @api.model
    def create(self, vals):
        if 'company_id' in vals:
            self = self.with_company(vals['company_id'])
        if vals.get('name', _('New')) == _('New'):
            seq_date = None
            # if self.custom_regime_id == 'transfert':
            vals['name'] = self.env['ir.sequence'].next_by_code('cash_seq', sequence_date=seq_date) or _('New')
        result = super(AccountCashRegister, self).create(vals)
        return result

    @api.model
    def _compute_amount2words(self):
        for rec in self:
            rec.amount_words = str(rec.currency_id.amount_to_text(rec.amount_c))

    name = fields.Char('Pièce N° ', index=True, default=lambda self: _('New'), track_visibility='onchange')
    currency_id = fields.Many2one('res.currency', 'Currency', required=True,
                                  default=lambda self: self.env.company.currency_id.id)
    motif = fields.Text('Motif', required=False, readonly=False, track_visibility=True)
    date = fields.Datetime('Date', default=_default_date_time, required=True, track_visibility=True)
    amount_c = fields.Integer('Total ', required=False, track_visibility=True, compute='onchange_amount_c')
    amounts = fields.Integer('Total ', required=False, track_visibility=True)
    amount = fields.Integer('Montant en chiffres:', required=False, track_visibility=True, compute='_compute_amount')
    amount_words = fields.Char(string="Montant en lettres: ", track_visibility=True, compute='_compute_amount2words',
                               help="Total amount in words is automatically generated by the system", )
    user_id = fields.Many2one('res.users', string='Emetteur', default=lambda self: self.env.user, readonly=True,
                              track_visibility=True)
    submit_date = fields.Date(string="Date emission", required=False, )
    beneficiaire = fields.Selection(string="Qui bénéficie?",
                                    selection=[('employee', 'Employé'), ('others', 'Autres'), ],
                                    default='employee', required=False, )
    employee_id = fields.Many2one('hr.employee', string='Bénéficiaire', track_visibility=True)
    partner_id = fields.Many2one('res.partner', string='Bénéficiaire', track_visibility=True)
    department_id = fields.Many2one('hr.department', 'Service')
    responsible_id = fields.Many2one('hr.employee', 'Responsable')

    validate_user = fields.Many2one('res.users', 'Valideur', track_visibility=True)
    validate_date = fields.Date(string="Date validation", required=False, )
    pay_user = fields.Many2one('res.users', 'Payeur', track_visibility=True)
    approve_user = fields.Many2one('res.users', 'Approbateur', track_visibility=True)
    approve_date = fields.Date(string="Date Approbation", required=False, )
    payment_date = fields.Datetime('Date paiement', track_visibility=True, default=0)
    transaction_type = fields.Selection([('output', 'Dépenses'), ('input', 'Recettes')],
                                        default="output", string='Type transaction', required=True)

    state = fields.Selection(
        [('draft', 'Draft'), ('open', 'Open'), ('validated', 'Validated'), ('approve', 'Approved'), ('paid', 'Paid'),
         ('refused', 'Refused'), ('cancel', 'Cancelled'), ], default="draft",
        track_visibility="onchange")
    cash_year = fields.Char('Exercice', default=_default_cash_year, Readonly=True, track_visibility=True)
    customer_id = fields.Many2one('res.partner', string='Client', track_visibility=True,
                                  domain=[('is_customer', '=', True)])

    description_ids = fields.One2many(comodel_name="cash.description", inverse_name="cash_register_id",
                                      string="Motif", required=False, )


    refuse_reason = fields.Char(string='Raison du refus', index=True, track_visibility='onchange')


    invoice_id = fields.Many2one(comodel_name="account.move", string="Invoice",
                                 domain="[('state', 'not in', 'posted')]")


    # MODE DE PAIEMEN
    payment_method = fields.Selection(string="Mode de paiement",
                                      selection=[('cash', 'Caisse'), ('bank', 'Banque'), ('virement', 'Virement'),
                                                 ('cheque', 'Chèques'), ('others', 'Autres')], required=False, )
    bank = fields.Many2one('res.bank', 'Banque')
    bank_number = fields.Many2one('res.partner.bank', 'N° Compte')
    deposit_name = fields.Char(string="Déposant")
    cheque_number = fields.Char('N° Chèque')



    @api.depends('description_ids.amount',)
    def onchange_amount_c(self):
        for rec in self:
            # self.amounts = self.amount_c = 0.0
            total_amount = 0.0
            if rec.description_ids:
                for line in rec.description_ids:
                    total_amount += line.amount
                amount_words = self.currency_id.amount_to_text(total_amount)
            rec.update({
                'amount_c': total_amount,
                'amounts': total_amount, })

    @api.onchange('transaction_type', 'amounts')
    def _compute_amount(self):
        for rec in self:
            if rec.amount_c:
                rec.amounts = rec.amount_c

            if (rec.transaction_type == 'output') and rec.amounts:
                sign = -1
                rec.amount = sign * rec.amounts
            else:
                sign = 1
                rec.amount = sign * rec.amounts


    def button_open(self):
        for rec in self:
            rec.state = 'open'
            rec.user_id = self.env.user
            rec.submit_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    def button_validated(self):
        for rec in self:
            rec.validate_user = self.env.user
            rec.state = 'validated'
            rec.validate_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    def button_approve(self):
        for rec in self:
            rec.approve_user = self.env.user
            rec.state = 'approve'
            rec.approve_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    def button_paid(self):
        for rec in self:
            rec.payment_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            rec.pay_user = self.env.user
            rec.state = 'paid'

    def button_draft(self):
        for rec in self:
            rec.state = 'draft'

    def button_cancel(self):
        for rec in self:
            rec.state = 'cancel'

    def button_refused(self):
        for rec in self:
            rec.state = 'refused'

    def action_refuse_cash(self, refuse_reason):
        for rec in self:
            if rec.state == 'open' or rec.state == 'validated' or rec.state == 'approve':
                rec.button_refused()
                for sheet in self:
                    sheet.message_post_with_view('cash_register.cash_register_template_refuse_reason',
                                                 values={'reason': refuse_reason, 'name': self.name})

    def unlink(self):
        for rec in self:
            if rec.state in ['open', 'validated', 'paid', 'cancel', 'approve']:
                raise UserError(_('Only records in draft status can be deleted.'))
        return super(AccountCashRegister, self).unlink()


class CashDescription(models.Model):
    _name = 'cash.description'
    _rec_name = 'name'
    _description = 'New Description'

    name = fields.Char('Motif')
    amount = fields.Monetary('Montant')
    currency_id = fields.Many2one('res.currency', 'Currency', default=lambda self: self.env.company.currency_id.id,
                                  required=True, )
    # 13/06/2023
    payment_state = fields.Selection(string="Statut", selection=[('not paid', 'Non payé'), ('paid', 'Payé'), ],default='not paid', required=False, )

    cash_register_id = fields.Many2one('account.cash.register')
    cash_register_receipt_id = fields.Many2one('account.cash.register.receipt')
